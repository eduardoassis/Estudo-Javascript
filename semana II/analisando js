Chapter 4 - Funções

Funções são usadas para reuso de código, ocultação de informações e composição.Podem também especificar comportamento de objetos.

Objetos funções

Funções em JavaScript são objetos. 
Funções objetos são "lincadas" à Funcao.prototype

Função literal

Objetos funções são criados com funções literais.

Um função literal possui quatro partes: 
Primeira: palavra reservada 'function'
Segunda(opcional): nome da função. É opcional pois uma função pode ser uma função anônima.
Terceira: conjunto de parâmetros.
Quarta: corpo da função.

Uma função pode declarar outras funções em seu corpo.
Uma função criada por uma função literal, contém um link para o contexto interno a ela, ou seja, um link para o contexto da função criadora.

Invocação

Existem quatro padrões de invocação em JavaScript: 
invocação de método, chamada de função, invocação de construtor e apply invocarion patter. 
Esses padrões se diferem na forma que inicializam o parâmetro 'this'.


Método
Quando uma função é salva como uma propriedade de um objeto, ela é chamada de método.
Um método pode usar o this para acessar o objeto e então recuperar valores de propriedade do objeto e alterar o estado do objeto.

Chamda de função

Dúvida vide exemplo
Quando uma função não é uma propriedade de um objeto, ela é invocada como uma função. Quando uma função é invocada com esse padrão, ela é amarrada ao objeto global, o que pode ser um problema. 
Para conseguir disponibilizar o acesso ao seu escopo à uma função interna(que não é uma função do objeto), a função externa deve atribuir o this a uma variável, assim a função interna consegue acesso ao escopo da função externa.

Invocação de construtor


Método apply

Funções podem possuir métodos.
O método apply nos permite construir uma matriz de argumentos a ser usada para chamar a função.

Arguments

Um parãmetro "bônus" é diponibilizado quando uma função'é invocada que é um array de argumentos como todos os parâmetros passados na chamada da função. Isso permite escrever funções que não esperam um número específico de parâmetros.

Retorno

Uma função sempre retorna um valor. Se o valor de retorno não for especificado, é retornado o valor undefined.

Exceções

JavaSript fornece um mecanismo de tratamento de exceções.
O bloco de try/catch diferente de linguagens como java, possui somente um bloco catch que tratará todas as  exceções. Para realizar o tratamento específico de cada exceção, será necessário verificar o tipo da exceção capiturada.

Augmenting types ???
Parece alterar o comportamento de funções que são usadas por várias outras funções, tipo, cria algum método que ainda não existe, e todos que "herdam" de Function.prototype, reescrevem o comportamento da função.


Recursão

Funções recursivas podem ser muito eficazes na manipulação de estruturas de árvore, como Document Object Model do navegador (DOM).
JavaScript não oferece recursão de chamada de caudade, que serve para otimizar a recursão.

Escopo

JavaScript não possue escopo de bloco. 
Possui escopo de função, isso significa que parâmetros e variáveis definidas em uma função não são visíveis fora dessa função e que uma variável definida em qualquer lugar dentro da função é visívelem qualquer lugar dentro da função.
Em JavaScript, é melhor declarar todas as variáveis usadas em um função no início do corpo da função, diferente de lingugens mais modernas. Isso ocorre pelo fato de JavaScript não possuir escopo de bloco.

Encerramento (closure)

Funções internas possuem acesso aos parametros e variáveis das funções onde elas são definidas, com exceção de 'this' e 'arguments'. Isso é bom.




