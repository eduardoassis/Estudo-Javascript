Javascript - Exercício 2


--- PARTE 1 ---

Você deve criar um arquivo html com o script contendo a solução.

Implemente uma função recursiva que efetue uma busca em árvore. A funcão deve receber um valor Number e o nó raiz da arvore e retornar o objeto nó que corresponde àquele valor. A estrutura do nó da arvore é a seguinte:

{
  value: 33,
  name: "Node 33",
  children: [ ]         // nesta propriedade estará um array de outros nós.
}

Interface sugerida do método:

function treeSearch(rootNode, value) {

  // Efetua aqui a busca
  return node;
}


--- PARTE 2 ---


Após implementar o método, implementar de forma orientada a objetos. Criar uma função Tree que possa ser instanciada passando a estrutura da arvore no construtor. Essa estrutura sera armazenada em uma variavel interna (e não acessivel de fora) do objeto. Esse objeto tree tera a função que foi inplementada na parte 1 do exercício, porém, recebendo apenas o valor buscado, pois a arvore ele já terá armazenada. A função também deve possuir um metodo getNodes() que retorna a estrutura da arvore que foi passada como parâmetro.

Exemplo de uso da classe:

var treeNodes = {      // Uma árvore mto complexa aqui, rs
   value: 33,
  name: "Node 33",
  children: [ ]
}

var myTree = new Tree(treeNodes);

var nodeResult = myTree.search(45);


Dica: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript


--- ANEXOS ---


Segue uma arvore para ser utilizada para teste:

- Node 4
    - Node 8
        - Node 1
            - Node 45
        - Node 6
        - Node 7
    - Node 9
        - Node 5
    - Node 13


Em Javascript:


var treeExample =
  {
    "value": 4,
    "name": "Node 4",
    "children": [
      {
        "value": 8,
        "name": "Node 8",
        "children": [
          {
            "value": 1,
            "name": "Node 1",
            "children": [
              {
                "value": 45,
                "name": "Node 45",
                "children": [ ]
              }
            ]
          },
          {
            "value": 6,
            "name": "Node 6",
            "children": [ ]
          },
          {
            "value": 7,
            "name": "Node 7",
            "children": [ ]
          }
        ]
      },
      {
        "value": 9,
        "name": "Node 9",
        "children": [
          {
            "value": 5,
            "name": "Node 5",
            "children": [ ]
          }
        ]
      },
      {
        "value": 13,
        "name": "Node 13",
        "children": [ ]
      }
    ]
  }
